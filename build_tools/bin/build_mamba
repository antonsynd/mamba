#!/usr/bin/env python3
import argparse
import subprocess
import sys

from pathlib import Path
from tempfile import NamedTemporaryFile
from typing import Sequence

CPP_DIR: Path = Path(__file__).parent.parent.parent / "cpp"
CPP_BUILD_DIR: Path = CPP_DIR / "build"


def main() -> None:
    parser: argparse.ArgumentParser = create_parser()
    args, rest = parser.parse_known_args()

    command: str = args.command

    if command == "build":
        build(args=args, rest=rest)
    elif command == "clean":
        clean(args=args, rest=rest)
    elif command == "install":
        install(args=args, rest=rest)
    elif command == "format":
        format(args=args, rest=rest)
    elif command == "release":
        format(args=args, rest=rest)
        build(args=args, rest=rest)
        test(args=args, rest=rest)
        memcheck(args=args, rest=rest)
        install(args=args, rest=rest)
    elif command == "test":
        test(args=args, rest=rest)
    elif command == "memcheck":
        memcheck(args=args, rest=rest)
    elif command == "help":
        parser.print_help()
    else:
        print(f'Unknown command "{command}"', file=sys.stderr)


def create_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="")
    subparsers = parser.add_subparsers(dest="command")

    build_parser = subparsers.add_parser("build")
    clean_parser = subparsers.add_parser("clean")
    install_parser = subparsers.add_parser("install")
    format_parser = subparsers.add_parser("format")
    release_parser = subparsers.add_parser("release")
    test_parser = subparsers.add_parser("test")
    memcheck_parser = subparsers.add_parser("memcheck")
    help_parser = subparsers.add_parser("help")

    return parser


def build(args: argparse.Namespace, rest: Sequence[str]) -> None:
    CPP_BUILD_DIR.mkdir(exist_ok=True)

    try:
        subprocess.run(
            args=["cmake", "-S", str(CPP_DIR), "-B", str(CPP_BUILD_DIR)],
            check=True,
        )

        subprocess.run(args=["cmake", "--build", str(CPP_BUILD_DIR)], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Encountered error {e}", file=sys.stderr)
        sys.exit(1)


def clean(args: argparse.Namespace, rest: Sequence[str]) -> None:
    subprocess.run(args=["rm", "-rf", str(CPP_BUILD_DIR)])


def install(args: argparse.Namespace, rest: Sequence[str]) -> None:
    pass


def memcheck(args: argparse.Namespace, rest: Sequence[str]) -> None:
    pass


def format(args: argparse.Namespace, rest: Sequence[str]) -> None:
    with NamedTemporaryFile(mode="w", encoding="utf-8") as temp_file:
        for cpp_file_path in generate_cpp_files_for_formatting():
            temp_file.write(f"{cpp_file_path}\n")

        temp_file.flush()

        try:
            subprocess.run(
                args=[
                    "clang-format",
                    "-i",
                    "--style=Chromium",
                    f"--files={temp_file.name}",
                ],
                check=True,
            )
        except subprocess.CalledProcessError as e:
            print(f"Encountered error {e}", file=sys.stderr)
            sys.exit(1)


def generate_cpp_files_for_formatting():
    paths_to_search: Sequence[Path] = [
        CPP_DIR / "src",
        CPP_DIR / "test",
        CPP_DIR / "include",
    ]

    for search_dir in paths_to_search:
        for cpp_file_path in search_dir.glob("**/*.*pp"):
            if cpp_file_path.suffix not in {".cpp", ".hpp"}:
                continue

            yield cpp_file_path


def test(args: argparse.Namespace, rest: Sequence[str]) -> None:
    build_test_dir: Path = CPP_BUILD_DIR / "test"

    if not build_test_dir.exists():
        print(f"Tests were not built yet.", file=sys.stderr)
        sys.exit(1)

    try:
        subprocess.run(args=["ctest", "--output-on-failure", *rest], cwd=build_test_dir)
    except subprocess.CalledProcessError as e:
        print(f"Encountered error {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
